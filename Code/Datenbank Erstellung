{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Erstellung der SQL-Datenbank**"],"metadata":{"id":"Ep26vzL9DN-Q"}},{"cell_type":"code","source":["import sqlite3\n","import pandas as pd\n","import os\n","from google.colab import drive\n","\n","# Google Drive mounten\n","drive.mount(\"/content/drive\")\n","\n","# Verzeichnis mit den CSV-Dateien\n","material_path = \"/content/drive/MyDrive/Gruppe A/COVID 19 data\"\n","print(\"Verfügbare Dateien im Verzeichnis:\")\n","!ls \"{material_path}\"\n","\n","# Name der SQLite-Datenbank\n","database_file = \"covid19_data.db\"\n","\n","try:\n","    # Verbindung zur SQLite-Datenbank herstellen\n","    with sqlite3.connect(database_file) as conn:\n","        cursor = conn.cursor()\n","\n","        # Fremdschlüssel aktivieren\n","        cursor.execute(\"PRAGMA foreign_keys = ON;\")\n","\n","        # Tabellen erstellen\n","        table_creation_queries = {\n","            \"patients\": \"\"\"\n","                CREATE TABLE IF NOT EXISTS patients (\n","                    Id TEXT PRIMARY KEY,\n","                    BIRTHDATE TEXT,\n","                    DEATHDATE TEXT,\n","                    SSN TEXT,\n","                    DRIVERS TEXT,\n","                    PASSPORT TEXT,\n","                    PREFIX TEXT,\n","                    FIRST TEXT,\n","                    LAST TEXT,\n","                    SUFFIX TEXT,\n","                    MAIDEN TEXT,\n","                    MARITAL TEXT,\n","                    RACE TEXT,\n","                    ETHNICITY TEXT,\n","                    GENDER TEXT,\n","                    BIRTHPLACE TEXT,\n","                    ADDRESS TEXT,\n","                    CITY TEXT,\n","                    STATE TEXT,\n","                    COUNTRY TEXT,\n","                    ZIP TEXT,\n","                    LAT REAL,\n","                    LON REAL,\n","                    HEALTHCARE_EXPENSES REAL,\n","                    HEALTHCARE_COVERAGE REAL\n","                );\n","            \"\"\",\n","            \"conditions\": \"\"\"\n","                CREATE TABLE IF NOT EXISTS conditions (\n","                    START TEXT,\n","                    STOP TEXT,\n","                    PATIENT TEXT,\n","                    ENCOUNTER TEXT,\n","                    CODE TEXT,\n","                    DESCRIPTION TEXT,\n","                    FOREIGN KEY (PATIENT) REFERENCES patients (Id)\n","                );\n","            \"\"\",\n","            \"observations\": \"\"\"\n","                CREATE TABLE IF NOT EXISTS observations (\n","                    DATE TEXT,\n","                    PATIENT TEXT,\n","                    ENCOUNTER TEXT,\n","                    CODE TEXT,\n","                    DESCRIPTION TEXT,\n","                    VALUE TEXT,\n","                    UNITS TEXT,\n","                    TYPE TEXT,\n","                    FOREIGN KEY (PATIENT) REFERENCES patients (Id)\n","                );\n","            \"\"\"\n","        }\n","\n","        # CSV-Dateien und zugehörige Tabellen\n","        csv_files = {\n","            f\"{material_path}/patients.csv\": \"patients\",\n","            f\"{material_path}/conditions.csv\": \"conditions\",\n","            f\"{material_path}/observations.csv\": \"observations\"\n","        }\n","\n","        # Tabellen erstellen und Daten importieren\n","        for csv_file, table_name in csv_files.items():\n","            print(f\"\\nVerarbeite Tabelle: {table_name}\")\n","\n","            # Überprüfen, ob die CSV-Datei existiert\n","            if not os.path.exists(csv_file):\n","                print(f\"[WARNUNG] Die Datei {csv_file} existiert nicht.\")\n","                continue\n","\n","            # Tabelle erstellen\n","            try:\n","                print(f\"Erstelle Tabelle: {table_name}\")\n","                cursor.execute(table_creation_queries[table_name])\n","                conn.commit()\n","            except Exception as e:\n","                print(f\"[FEHLER] Tabelle '{table_name}' konnte nicht erstellt werden: {e}\")\n","                continue\n","\n","            # CSV-Datei einlesen und Daten importieren\n","            try:\n","                print(f\"Lese CSV-Datei: {csv_file}\")\n","                df = pd.read_csv(csv_file)\n","\n","                # Überprüfen, ob die CSV-Datei Daten enthält\n","                if df.empty:\n","                    print(f\"[WARNUNG] Die CSV-Datei {csv_file} ist leer.\")\n","                    continue\n","\n","                print(f\"Importiere Daten in die Tabelle {table_name}...\")\n","                df.to_sql(table_name, conn, if_exists=\"replace\", index=False)\n","                print(f\"Daten erfolgreich in Tabelle '{table_name}' importiert.\")\n","            except Exception as e:\n","                print(f\"[FEHLER] Import in Tabelle '{table_name}' fehlgeschlagen: {e}\")\n","\n","        print(f\"\\nDie Daten wurden erfolgreich in die Datenbank '{database_file}' importiert.\")\n","\n","except Exception as e:\n","    print(f\"\\nEin Fehler ist aufgetreten: {e}\")\n","\n","finally:\n","    print(\"Vorgang abgeschlossen.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HX7YSLG1CDd9","executionInfo":{"status":"ok","timestamp":1738840871293,"user_tz":-60,"elapsed":28370,"user":{"displayName":"Benny Bucher","userId":"11489734840240526900"}},"outputId":"1b941305-bdce-4063-adfc-e1bd2286786b"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Verfügbare Dateien im Verzeichnis:\n","careplans.csv\t devices.csv\t  imaging_studies.csv\tobservations.csv   payers.csv\n","careplans.xlsx\t disease.csv\t  imaging_studies.xlsx\tobservations.xlsx  payer_transitions.csv\n","conditions.csv\t disease.xlsx\t  immunizations.csv\torganizations.csv  procedures.csv\n","conditions.xlsx  encounters.csv   medications.csv\tpatients.csv\t   providers.csv\n","covid19_test.db  encounters.xlsx  medications.xlsx\tpatients.xlsx\t   supplies.csv\n","\n","Verarbeite Tabelle: patients\n","Erstelle Tabelle: patients\n","Lese CSV-Datei: /content/drive/MyDrive/Gruppe A/COVID 19 data/patients.csv\n","Importiere Daten in die Tabelle patients...\n","Daten erfolgreich in Tabelle 'patients' importiert.\n","\n","Verarbeite Tabelle: conditions\n","Erstelle Tabelle: conditions\n","Lese CSV-Datei: /content/drive/MyDrive/Gruppe A/COVID 19 data/conditions.csv\n","Importiere Daten in die Tabelle conditions...\n","Daten erfolgreich in Tabelle 'conditions' importiert.\n","\n","Verarbeite Tabelle: observations\n","Erstelle Tabelle: observations\n","Lese CSV-Datei: /content/drive/MyDrive/Gruppe A/COVID 19 data/observations.csv\n","Importiere Daten in die Tabelle observations...\n","Daten erfolgreich in Tabelle 'observations' importiert.\n","\n","Die Daten wurden erfolgreich in die Datenbank 'covid19_data.db' importiert.\n","Vorgang abgeschlossen.\n"]}]},{"cell_type":"markdown","source":["# **Auslesen der SQL-Datenbank (covid19_data.db)**"],"metadata":{"id":"SArI1DYVDplo"}},{"cell_type":"code","source":["def reopen_and_inspect_database(db_file):\n","    \"\"\"\n","    Öffnet die Verbindung zu einer SQLite-Datenbank, listet die vorhandenen Tabellen\n","    und zeigt die ersten Zeilen (max. 5) jeder Tabelle an.\n","    \"\"\"\n","    try:\n","        # Verbindung zur Datenbank herstellen\n","        with sqlite3.connect(db_file) as conn:\n","            cursor = conn.cursor()\n","\n","            # Tabellen abfragen\n","            cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n","            tables = cursor.fetchall()\n","\n","            if not tables:\n","                print(\"Die Datenbank enthält keine Tabellen.\")\n","                return\n","\n","            print(f\"Tabellen in der Datenbank '{db_file}':\")\n","            for table in tables:\n","                table_name = table[0]\n","                print(f\"\\n--- Tabelle: {table_name} ---\")\n","\n","                # Spaltennamen der Tabelle abfragen\n","                cursor.execute(f\"PRAGMA table_info({table_name});\")\n","                columns = cursor.fetchall()\n","                column_names = [column[1] for column in columns]\n","                print(f\"Spalten: {', '.join(column_names)}\")\n","\n","                # Inhalte der Tabelle abfragen\n","                query = f\"SELECT * FROM {table_name} LIMIT 5;\"  # Zeigt die ersten 5 Zeilen an\n","                try:\n","                    df = pd.read_sql_query(query, conn)\n","                    if df.empty:\n","                        print(f\"Die Tabelle '{table_name}' ist leer.\")\n","                    else:\n","                        print(f\"Inhalt der Tabelle '{table_name}' (erste 5 Zeilen):\")\n","                        print(df.to_string(index=False))  # Index wird nicht angezeigt\n","                except Exception as e:\n","                    print(f\"Fehler beim Abrufen der Daten aus der Tabelle '{table_name}': {e}\")\n","\n","    except sqlite3.Error as e:\n","        print(f\"Fehler beim Zugriff auf die Datenbank: {e}\")\n","    finally:\n","        print(\"Datenbankinspektion abgeschlossen.\")\n","\n","# Name der SQLite-Datenbank\n","database_file = \"covid19_data.db\"\n","\n","# Funktion ausführen\n","reopen_and_inspect_database(database_file)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vJ5z0bbSCzbJ","executionInfo":{"status":"ok","timestamp":1738840871365,"user_tz":-60,"elapsed":68,"user":{"displayName":"Benny Bucher","userId":"11489734840240526900"}},"outputId":"52a3187a-c7f2-43d5-922d-4ee671f757ac"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Tabellen in der Datenbank 'covid19_data.db':\n","\n","--- Tabelle: patients ---\n","Spalten: Id, BIRTHDATE, DEATHDATE, SSN, DRIVERS, PASSPORT, PREFIX, FIRST, LAST, SUFFIX, MAIDEN, MARITAL, RACE, ETHNICITY, GENDER, BIRTHPLACE, ADDRESS, CITY, STATE, COUNTY, ZIP, LAT, LON, HEALTHCARE_EXPENSES, HEALTHCARE_COVERAGE\n","Inhalt der Tabelle 'patients' (erste 5 Zeilen):\n","                                  Id  BIRTHDATE DEATHDATE         SSN   DRIVERS   PASSPORT PREFIX     FIRST        LAST SUFFIX MAIDEN MARITAL  RACE   ETHNICITY GENDER                     BIRTHPLACE                       ADDRESS       CITY         STATE            COUNTY    ZIP       LAT        LON  HEALTHCARE_EXPENSES  HEALTHCARE_COVERAGE\n","2f114e21-8b95-e9eb-2e9e-4b950b059cfa 2002-05-05      None 999-23-8106 S99926648       None    Ms. Terisa250  Kreiger457   None   None    None white nonhispanic      F      Oxford  Massachusetts  US        325 Robel Route Apt 85 Swampscott Massachusetts      Essex County 1907.0 42.472736 -70.876528            471180.00              2784.81\n","2812f4fc-6aba-0033-728b-7e569bb8adcc 1942-05-24      None 999-24-5281 S99910925 X76697172X    Mr.  Romeo514    Morar593   None   None       M white nonhispanic      M Springfield  Massachusetts  US        496 Klein Wynd Unit 85   Charlton Massachusetts  Worcester County    NaN 42.131465 -71.970333           1606235.00              5375.37\n","9b1a203a-6368-49a5-0c79-45c32729bc17 2013-06-15      None 999-75-9525      None       None   None  Jamaal34    Hessel84   None   None    None white nonhispanic      M  Framingham  Massachusetts  US             184 Corkery Byway    Methuen Massachusetts      Essex County    NaN 42.730660 -71.159442            172970.00              2074.05\n","52a250a9-24e4-ec9b-91d6-c38cf1b10fc0 1997-11-16      None 999-26-4891 S99979802 X57430890X    Ms.  Kenya524 Leuschke194   None   None    None white nonhispanic      F      Easton  Massachusetts  US 634 Predovic Mission Suite 14   Yarmouth Massachusetts Barnstable County    NaN 41.663563 -70.234152            557170.00              2653.13\n","ad5525c0-fdab-94dc-018f-d7209c72bdef 1965-08-28      None 999-29-9941 S99959414 X19338033X    Mr.  Clark193   Little434   None   None       M white nonhispanic      M      Lowell  Massachusetts  US             950 Kshlerin Park     Malden Massachusetts  Middlesex County 2148.0 42.392584 -71.078063             68024.89              2743.96\n","\n","--- Tabelle: conditions ---\n","Spalten: START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION\n","Inhalt der Tabelle 'conditions' (erste 5 Zeilen):\n","     START       STOP                              PATIENT                            ENCOUNTER      CODE             DESCRIPTION\n","2020-02-17 2020-02-27 ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa  49727002         Cough (finding)\n","2020-02-24 2020-03-11 7f30313f-98e9-2cc2-68a5-6f9973f9ad5a ccb50c60-5c51-3d03-3aeb-824325cfac91  49727002         Cough (finding)\n","2020-02-17 2020-02-27 ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa 386661006         Fever (finding)\n","2020-02-17 2020-02-27 ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa  36955009 Loss of taste (finding)\n","2020-02-17 2020-02-17 ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa 840544004      Suspected COVID-19\n","\n","--- Tabelle: observations ---\n","Spalten: DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS, TYPE\n","Inhalt der Tabelle 'observations' (erste 5 Zeilen):\n","                DATE                              PATIENT                            ENCOUNTER   CODE                         DESCRIPTION VALUE  UNITS    TYPE\n","2020-02-17T21:57:21Z ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa 8310-5                    Body temperature  41.4    Cel numeric\n","2020-02-17T21:57:21Z ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa 9279-1                    Respiratory rate  21.4   /min numeric\n","2020-02-17T21:57:21Z ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa 8867-4                          Heart rate  61.6   /min numeric\n","2020-02-17T21:57:21Z ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa 2708-6 Oxygen saturation in Arterial blood  77.4      % numeric\n","2020-02-17T21:57:21Z ad5525c0-fdab-94dc-018f-d7209c72bdef 1d453a83-17f7-490d-5576-09f5725cdcaa 8462-4            Diastolic Blood Pressure  85.0 mm[Hg] numeric\n","Datenbankinspektion abgeschlossen.\n"]}]}]}